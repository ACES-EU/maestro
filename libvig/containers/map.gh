#ifndef MAP_GH
#define MAP_GH

fixpoint list<pair<kt,vt> > empty_map_fp<kt,vt>() { return nil; }

fixpoint vt map_get_fp<kt,vt>(list<pair<kt,vt> > m, kt key) {
  switch(m) {
    case nil: return default_value<vt>();
    case cons(h,t):
      return (fst(h) == key ? snd(h) : map_get_fp(t, key));
  }
}

fixpoint bool map_has_fp<kt,vt>(list<pair<kt,vt> > m, kt key) {
  switch(m) {
    case nil: return false;
    case cons(h,t):
      return (fst(h) == key) || map_has_fp(t, key);
  }
}

fixpoint list<pair<kt,vt> > map_put_fp<kt,vt>(list<pair<kt,vt> > m,
                                              kt key, vt val) {
  return cons(pair(key,val), m);
}

fixpoint list<pair<kt,vt> > map_erase_fp<kt,vt>(list<pair<kt,vt> > m, kt key) {
  switch(m) {
    case nil: return nil;
    case cons(h,t):
      return fst(h) == key ? t : cons(h, map_erase_fp(t, key));
  }
}

fixpoint list<pair<kt,vt> > map_erase_all_fp<kt,vt>(list<pair<kt,vt> > m, list<kt> keys) {
  switch(keys) {
    case nil: return m;
    case cons(h,t):
      return map_erase_fp(map_erase_all_fp(m, t), h);
  }
}

fixpoint int map_size_fp<kt,vt>(list<pair<kt,vt> > m) {
  return length(m);
}

#endif//MAP_GH
