#include <stdint.h>
#include "lib/expirator.h"
#include "lib/nf_time.h"
#include "lib/stubs/my-time-stub-control.h"
#include "lib/containers/double-map.h"
#include "lib/containers/double-chain.h"
#include "lib/stubs/containers/double-map-stub-control.h"

#include "lib/containers/batcher.h"

#include "lib/containers/array-bat.h"
#include "lib/containers/array-rq.h"
#include "lib/containers/array-u16.h"
#include "lib/containers/array-lcc.h"
#include "vignat/loop.h"
#include "bridge/bridge_loop.h"
#include "bridge/bridge_data.h"

//@ #include "lib/abstract-state.h"

int flow_consistency(void* key_a, void* key_b, int index, void* value)
/*@ requires true; @*/
/*@ ensures true; @*/
{
   return 0;
}

//@ predicate a_packet(struct rte_mbuf *mbuf);
/*@
    inductive ether_hdri = ether_hdrc(ether_addri, ether_addri, int);

    predicate ether_hdrp(struct ether_hdr *ether; ether_hdri hdr) =
        ether_addrp(&ether->d_addr, ?daddr) &*&
        ether_addrp(&ether->s_addr, ?saddr) &*&
        ether->ether_type |-> ?et &*&
        hdr == ether_hdrc(saddr, daddr, et);

    inductive ipv4_hdri =
      ipv4_hdrc(int, int, int, int, int, int, int, int, int);

    predicate ipv4_hdrp(struct ipv4_hdr* hdr; ipv4_hdri val) =
      hdr->version_ihl |-> ?vihl &*&
      hdr->type_of_service |-> ?tos &*&
      hdr->total_length |-> ?len &*&
      hdr->packet_id |-> ?pid &*&
      hdr->fragment_offset |-> ?foff &*&
      hdr->time_to_live |-> ?ttl &*&
      hdr->next_proto_id |-> ?npid &*&
      // no checksum
      hdr->src_addr |-> ?saddr &*&
      hdr->dst_addr |-> ?daddr &*&
      val == ipv4_hdrc(vihl, tos, len, pid, foff, ttl, npid, saddr, daddr);

    inductive tcp_hdri =
      tcp_hdrc(int, int, int, int, int, int, int, int);

    predicate tcp_hdrp(struct tcp_hdr* hdr; tcp_hdri val) =
      hdr->src_port |-> ?srcp &*&
      hdr->dst_port |-> ?dstp &*&
      hdr->sent_seq |-> ?seq &*&
      hdr->recv_ack |-> ?ack &*&
      hdr->data_off |-> ?doff &*&
      hdr->tcp_flags |-> ?flags &*&
      hdr->rx_win |-> ?win &*&
      // no checksum
      hdr->tcp_urp |-> ?urp &*&
      val == tcp_hdrc(srcp, dstp, seq, ack, doff, flags, win, urp);

    inductive user_bufi = user_bufc(ether_hdri, ipv4_hdri, tcp_hdri);

    predicate user_bufferp(struct user_buf *buf; user_bufi ub) =
      ether_hdrp(&buf->ether, ?hdr) &*&
      ipv4_hdrp(&buf->ipv4, ?ipv4) &*&
      tcp_hdrp(&buf->tcp, ?tcp) &*&
      ub == user_bufc(hdr, ipv4, tcp);

    inductive rte_mbufi = rte_mbufc(user_bufi, int, int, int);

    predicate mbufp(struct rte_mbuf *mbuf; rte_mbufi val) =
      mbuf->buf_addr |-> ?ba &*&
      mbuf->port |-> ?port &*&
      mbuf->packet_type |-> ?ptype &*&
      mbuf->data_off |-> ?doff &*&
      user_bufferp(ba, ?ub) &*&
      val == rte_mbufc(ub, port, ptype, doff);
@*/

int send_single_packet(struct rte_mbuf *m, uint8_t port);
//@ requires a_packet(m);
//@ ensures result != 0 ? true : a_packet(m);

void flood(struct rte_mbuf *m, uint8_t skip_device,
           uint8_t nb_devices);
//@ requires a_packet(m);
//@ ensures true;

void received_packet(uint8_t portid,
                     struct rte_mbuf **mbuf);
//@ requires true;
//@ ensures *mbuf |-> ?mb &*& a_packet(mb) &*& mbufp(mb, _);

void rte_pktmbuf_free(struct rte_mbuf *mbuf);
//@ requires a_packet(mbuf);
//@ ensures true;

/*@
lemma void bit_and_zero(int x)
requires true;
ensures 0 == (0&x);
{
  assume(false);//TODO
}
@*/

/*@ predicate hide_is_map_keys_equality<t>(map_keys_equality* fun,
                                           predicate (void*;t) keyp) =
      is_map_keys_equality<t>(fun, keyp);
 @*/

/*@ predicate hide_is_map_key_hash<t>(map_key_hash* fun,
                                      predicate (void*;t) keyp,
                                      fixpoint (t,int) hsh) =
      is_map_key_hash<t>(fun, keyp, hsh);
 @*/

/*@ predicate hide_mapp<t>(struct Map* p,
                           predicate (void*;t) kp,
                           fixpoint (t,int) hsh,
                           mapi<t> m) = mapp<t>(p, kp, hsh, m); @*/

/*@ predicate hide_vector<t>(struct Vector* p) = vectorp<t>(p, _, _); @*/
