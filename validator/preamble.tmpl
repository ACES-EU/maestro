#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include "lib/stubs/core_stub.h"

int flow_consistency(void* key_a, void* key_b, int index, void* value)
/*@ requires true; @*/
/*@ ensures true; @*/
{
   return 0;
}

void flood(struct rte_mbuf *m, uint8_t skip_device,
           uint8_t nb_devices);
//@ requires mbufp(m,_);
//@ ensures true;

// VeriFast can't deal with bitwise AND, so we hardcode known cases.
/*@
lemma void bit_and_hack()
requires true;
ensures 0x00 == (0x00 & 0x10) 
    &*& 0x00 == (0x01 & 0x10)
    &*& 0x10 == (0x11 & 0x10)
    &*& 0x00 == (0x41 & 0x10)
    &*& 0x10 == (0x111 & 0x10)
    &*& 0x10 == (0x211 & 0x10)
    &*& 0x00 == (0x241 & 0x10);
{
  assume(false);
}

// VeriFast can't reason about modulo either, let's help it a bit...
lemma void modulo_hack()
requires true;
ensures forall_(int i; i < 0 || i % 2 == 0 || i % 2 == 1);
{
  assume(false);
}

// Used to help VeriFast infer a list's shape, see https://github.com/verifast/verifast/issues/133#issuecomment-407018182
lemma void hack_isnil<t>(list<t> xs)
requires switch (xs) { case nil: return true; case cons(h, t): return false; };
ensures true;
{}
@*/
