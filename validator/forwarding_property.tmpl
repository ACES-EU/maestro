assert dmappingp<int_k,ext_k,flw>(?final_map,_,_,_,_,_,_,_,_,_,_,_,_,_);
assert double_chainp(?final_chain,_);

flowtable initial_ft = abstract_function(initial_double_map,
                                         initial_double_chain);
flowtable final_ft = abstract_function(final_map, final_chain);
   
bit_and_zero(0x00000010);
if (10 < now) {// consider only normal moments, remote from the start of the epoch

  if (a_packet_received &&
      ((received_packet_type & 0x00000010) ||
       (received_packet_type == 0 &&
        the_received_packet.ether.ether_type == 0x08))) {

    flowtable after_expiration_ft =
      abstract_function(map_after_expiration, chain_after_expiration);

    expire_flows_abstract(initial_double_map, initial_double_chain, now - 10);
    assert after_expiration_ft == flowtable_expire_flows(initial_ft, now - 10);

    // IPv4 packet
    if (the_received_packet.ipv4.next_proto_id == 6 ||
        the_received_packet.ipv4.next_proto_id == 17) {
      // TCP/UDP packet
      if (received_on_port == 1) {
        // packet from the external network
        ext_k external_flow_id = ekc(the_received_packet.tcp.dst_port,
                                     the_received_packet.tcp.src_port,
                                     the_received_packet.ipv4.dst_addr,
                                     the_received_packet.ipv4.src_addr,
                                     received_on_port,
                                     the_received_packet.ipv4.next_proto_id);
        contains_ext_k_abstract(map_after_expiration, chain_after_expiration,
                                external_flow_id);
        if (flowtable_contains_ext_flow_id(after_expiration_ft,
                                           external_flow_id)) {
          // flow is present in the table
          assert true == a_packet_sent;
          flw flow = flowtable_get_by_ext_flow_id(after_expiration_ft,
                                                  external_flow_id);
          get_flow_by_ext_abstract(map_after_expiration,
                                   chain_after_expiration,
                                   external_flow_id);
          rejuvenate_flow_abstract(map_after_expiration,
                                   chain_after_expiration,
                                   flow, the_index_rejuvenated, now);
          assert final_ft ==
                   flowtable_add_flow(flowtable_remove_flow(after_expiration_ft,
                                                            flow),
                                      flow,
                                      now);
          assert ikc(sent_packet.tcp.dst_port,
                     sent_packet.tcp.src_port,
                     sent_packet.ipv4.dst_addr,
                     sent_packet.ipv4.src_addr,
                     sent_on_port,
                     sent_packet.ipv4.next_proto_id) ==
                 flw_get_ik(flow);
          //TODO: ensure other parts of the sent packet remain the same.
        } else {
          // no flow in the table
          assert false == a_packet_sent;
          assert final_ft == after_expiration_ft;
        }
      } else {
        // packet from the internal network
        int_k internal_flow_id = ikc(the_received_packet.tcp.src_port,
                                     the_received_packet.tcp.dst_port,
                                     the_received_packet.ipv4.src_addr,
                                     the_received_packet.ipv4.dst_addr,
                                     received_on_port,
                                     the_received_packet.ipv4.next_proto_id);
        contains_int_k_abstract(map_after_expiration, chain_after_expiration,
                                internal_flow_id);
        if (flowtable_contains_int_flow_id(after_expiration_ft,
                                           internal_flow_id)) {
          // flow present in the table
          assert true == a_packet_sent;
          flw flow = flowtable_get_by_int_flow_id(after_expiration_ft,
                                                  internal_flow_id);
          get_flow_by_int_abstract(map_after_expiration,
                                   chain_after_expiration,
                                   internal_flow_id);
          rejuvenate_flow_abstract(map_after_expiration,
                                   chain_after_expiration,
                                   flow, the_index_rejuvenated, now);
          assert final_ft ==
                   flowtable_add_flow(flowtable_remove_flow(after_expiration_ft,
                                                            flow),
                                      flow,
                                      now);
          assert ekc(sent_packet.tcp.src_port,
                     sent_packet.tcp.dst_port,
                     sent_packet.ipv4.src_addr,
                     sent_packet.ipv4.dst_addr,
                     sent_on_port,
                     sent_packet.ipv4.next_proto_id) ==
                 flw_get_ek(flow);
          //TODO: ensure other parts of the sent packet remain the same.
        } else {
          // No flow in the table
          out_of_space_abstract(map_after_expiration, chain_after_expiration);
          if (flowtable_out_of_space(after_expiration_ft)) {
            // Flowtable overflow
            assert false == a_packet_sent;
            assert final_ft == after_expiration_ft;
          } else {
            // The flow must have been inserted
            assert true == a_packet_sent;
            add_flow_abstract(map_after_expiration, chain_after_expiration,
                              the_inserted_flow, the_index_allocated, now);
            assert final_ft == flowtable_add_flow(after_expiration_ft,
                                                  the_inserted_flow,
                                                  now);
            ext_k external_flow_id = flw_get_ek(the_inserted_flow);
            contains_ext_k_abstract(map_after_expiration,
                                    chain_after_expiration,
                                    external_flow_id);
            assert false == flowtable_contains_ext_flow_id(after_expiration_ft,
                                                           external_flow_id);
            assert ekc(sent_packet.tcp.src_port,
                       sent_packet.tcp.dst_port,
                       sent_packet.ipv4.src_addr,
                       sent_packet.ipv4.dst_addr,
                       sent_on_port,
                       sent_packet.ipv4.next_proto_id) ==
                   external_flow_id;
            //TODO: ensure other parts of the sent packet remain the same.
          }
        }
      }
    } else {
      // Non TCP or UDP packet
      assert false == a_packet_sent;
    }
  } else {
    // Non IPv4 packet
    assert false == a_packet_sent;
  }
}