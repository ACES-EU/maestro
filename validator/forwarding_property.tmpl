assert map_vec_chain_coherent<flow_id>(?final_flow_map, ?final_flow_vec, ?final_flow_chain);

#define EXP_TIME (10)
//TODO: get the nat addr
#define EXT_IP_ADDR (0)
#define EXT_PORT 1

#define UNRELEVANT_FIELDS_UNCHANGED(before,after)               \
    after.ether.ether_type     == before.ether.ether_type &&      \
    after.ipv4.version_ihl     == before.ipv4.version_ihl &&      \
    after.ipv4.type_of_service == before.ipv4.type_of_service &&  \
    after.ipv4.total_length    == before.ipv4.total_length &&     \
    after.ipv4.packet_id       == before.ipv4.packet_id &&        \
    after.ipv4.fragment_offset == before.ipv4.fragment_offset &&  \
    after.ipv4.time_to_live    == before.ipv4.time_to_live &&     \
    after.ipv4.next_proto_id   == before.ipv4.next_proto_id

#define UNRELEVANT_TCP_FIELDS_UNCHANGED(before,after)         \
    after.tcp.sent_seq         == before.tcp.sent_seq &&        \
    after.tcp.recv_ack         == before.tcp.recv_ack &&      \
    after.tcp.data_off         == before.tcp.data_off &&      \
    after.tcp.tcp_flags        == before.tcp.tcp_flags &&     \
    after.tcp.rx_win           == before.tcp.rx_win &&        \
    after.tcp.tcp_urp          == before.tcp.tcp_urp

bit_and_hack();
if (EXP_TIME < now) {// consider only normal moments, remote from the start of the epoch

  // 0x10 -> IPv4
  if (a_packet_received && ((received_packet_type & 0x10) == 0x10)) {

    flow_map = emap_expire_all_map(flow_map, flow_vec, flow_chain, now - EXP_TIME);
    keys_vec = emap_expire_all_vec(flow_map, flow_vec, flow_chain, now - EXP_TIME);
    flow_chain = emap_expire_all_chain(flow_map, flow_vec, flow_chain, now - EXP_TIME);

    // 6/17 -> TCP/UDP
    if (the_received_packet.ipv4.next_proto_id == 6 ||
        the_received_packet.ipv4.next_proto_id == 17) {
      if (received_on_port == EXT_PORT) {
        // packet from the external network
        int flow_indx = the_received_packet.tcp.dst_port - start_port;
        if (emap_has_index(flow_map, flow_vec, flow_chain, flow_indx)) { 
          // flow is present in the table
          assert true == a_packet_sent;
          flow_id internal_flow = fst(nth(flow_indx, flow_vec));
          flow_chain = emap_rejuvenate_idx_chain(flow_map, flow_vec, flow_chain, flow_indx, now);
          assert flid(sent_packet.tcp.dst_port,
                      sent_packet.tcp.src_port,
                      sent_packet.ipv4.dst_addr,
                      sent_packet.ipv4.src_addr,
                      sent_on_port,
                      sent_packet.ipv4.next_proto_id) ==
                 internal_flow;
          assert UNRELEVANT_FIELDS_UNCHANGED(the_received_packet, sent_packet);
          if (the_received_packet.ipv4.next_proto_id == 6) {
            assert UNRELEVANT_TCP_FIELDS_UNCHANGED(the_received_packet,
                                                   sent_packet);
          }
        } else {
          // no flow in the table
          assert false == a_packet_sent;
        }
      } else {
        // packet from the internal network
        flow_id internal_flow_id = flid(the_received_packet.tcp.src_port,
                                        the_received_packet.tcp.dst_port,
                                        the_received_packet.ipv4.src_addr,
                                        the_received_packet.ipv4.dst_addr,
                                        received_on_port,
                                        the_received_packet.ipv4.next_proto_id);
        if (emap_has(flow_map, flow_vec, flow_chain, internal_flow_id)) {
          // flow present in the table
          int idx = emap_get(flow_map, flow_vec, flow_chain, internal_flow_id);
          //flow flw = fst(nth(idx, flow_vec));
          flow_chain = emap_rejuvenate_idx_chain(flow_map, flow_vec, flow_chain, idx, now);
          assert true == a_packet_sent;
          assert sent_packet.tcp.src_port == idx + start_port;
          assert sent_packet.tcp.dst_port == the_received_packet.tcp.dst_port;
          assert sent_packet.ipv4.src_addr == EXT_IP_ADDR;
          assert sent_packet.ipv4.dst_addr == the_received_packet.ipv4.dst_addr;
          assert sent_packet.ipv4.next_proto_id == the_received_packet.ipv4.next_proto_id;
          assert sent_on_port == EXTERNAL_PORT;
          assert UNRELEVANT_FIELDS_UNCHANGED(the_received_packet, sent_packet);
          if (the_received_packet.ipv4.next_proto_id == 6) {
            assert UNRELEVANT_TCP_FIELDS_UNCHANGED(the_received_packet, sent_packet);
          }
        } else {
          // No flow in the table
          if (emap_full(flow_map, flow_vec, flow_chain)) {
            // Flowtable overflow
            assert false == a_packet_sent;
          } else {
            // The flow must have been inserted
            int idx = the_index_allocated;

            flow_chain = emap_allocate_int(flow_map, flow_vec, flow_chain, now, idx);
            flow_map = emap_add_map(flow_map, flow_vec, flow_chain, internal_flow_id, idx);
            flow_vec = emap_add_vec(flow_map, flow_vec, flow_chain, internal_flow_id, idx);

            assert true == a_packet_sent;
            assert sent_packet.tcp.src_port == idx + start_port;
            assert sent_packet.tcp.dst_port == the_received_packet.tcp.dst_port;
            assert sent_packet.ipv4.src_addr == EXT_IP_ADDR;
            assert sent_packet.ipv4.dst_addr == the_received_packet.ipv4.dst_addr;
            assert sent_packet.ipv4.next_proto_id == the_received_packet.ipv4.next_proto_id;
            assert sent_on_port == EXTERNAL_PORT;
            assert UNRELEVANT_FIELDS_UNCHANGED(the_received_packet, sent_packet);
            if (the_received_packet.ipv4.next_proto_id == 6) {
              assert UNRELEVANT_TCP_FIELDS_UNCHANGED(the_received_packet, sent_packet);
            }
          }
        }
      }
    } else {
      // Non TCP or UDP packet
      assert false == a_packet_sent;
    }
  } else {
    // Non IPv4 packet
    assert false == a_packet_sent;
  }
assert final_flow_map == flow_map;
assert final_flow_vec == flow_vec;
assert final_flow_chain == flow_chain;
}
