#ifndef STDEX_H
#define STDEX_H

lemma void length_0_nil<T>(list<T> lst)
requires length(lst) == 0;
ensures lst == nil;
{
    switch (lst) {
    case nil: return;
    case cons(h, t):
        assert(length(lst) > length(t));
        assert(length(t) == 0);
        assert(length(lst) > 0);
        assert(length(lst) == 0);
        return;
    }
}

  
lemma void nth_0_head<t>(list<t> lst)
requires lst != nil;
ensures nth(0, lst) == head(lst);
{
    switch(lst) {
    case nil: return;
    case cons(h, t): return;
    }
}
  
lemma void nth_cons<T>(int n, list<T> lst, T head)
requires 0 < n;
ensures nth(n-1, lst) == nth(n, cons(head, lst));
{
    switch(lst) {
    case nil: return;
    case cons(h, t): return;
    }
}
  
lemma void nth_len_append_cons<T>(list<T> lst, T x)
requires true;
ensures nth(length(lst), append(lst, cons(x, nil))) == x;
{
    switch(lst) {
    case nil: return;
    case cons(h, t):
        nth_len_append_cons(t, x);
        return;
    }
}

lemma void nth_less_append_cons<T>(int n, list<T> lst, T x)
requires 0 <= n &*& n < length(lst);
ensures nth(n, append(lst, cons(x, nil))) == nth(n, lst);
{
    switch(lst) {
    case nil: return;
    case cons(h, t):
        if (n == 0) {
            assert(h == nth(n, lst));
            assert(h == nth(n, append(lst, cons(x, nil))));
            return;
        } else {
            nth_less_append_cons(n - 1, t, x);
            return;
        }
    }
}
  
lemma void append_take_cons<T>(list<T> lst)
requires lst != nil;
ensures lst == append(take(length(lst) - 1, lst), cons(nth(length(lst) - 1, lst), nil));
{
    switch(lst) {
    case nil: return;
    case cons(h, t):
        if (t == nil) {
            assert(length(lst) == 1);
            assert(take(length(lst) - 1, lst) == nil);
            assert(cons(nth(length(lst) - 1, lst), nil) == lst);
            assert(append(nil, lst) == lst);
            return;
        } else {
            append_take_cons(t);
            assert(take(length(lst) - 1, lst) == cons(h, take(length(t) - 1, t)));
            assert(nth(length(lst) - 1, lst) == nth(length(t) - 1, t));
            assert(append(take(length(lst) - 1, lst), cons(nth(length(lst) - 1, lst), nil)) ==
                   cons(h, append(take(length(t) - 1, t), cons(nth(length(t) - 1, t), nil))));
            return;
        }
    }
}


lemma void cons_take_take_cons<T>(T head, list<T> tail, int n)
requires 0 <= n;
ensures cons(head, take(n, tail)) == take(n + 1, cons(head, tail));
{
    switch(tail) {
    case nil: return;
    case cons(h, t):
        return;
    }
}

  
lemma void cons_head_tail<T>(list<T> lst)
requires lst != nil;
ensures lst == cons(head(lst), tail(lst));
{
    switch(lst){
    case nil: return;
    case cons(h, t): return;
    }
}
  
lemma void length_tail<T>(list<T> lst)
requires lst != nil;
ensures length(lst) == 1 + length(tail(lst)) &*& 0 < length(lst);
{
    switch(lst) {
    case nil: return;
    case cons(h,t): return;
    }
}

lemma void update_tail_tail_update<T>(T lhead, list<T> ltail, int index, T val)
requires 0 < index;
ensures tail(update(index, val, cons(lhead, ltail))) == update(index - 1, val, ltail);
{
  switch(ltail) {
    case nil: return;
    case cons(h, t):
      if (index - 1 == 0) {
      } else {
        update_tail_tail_update(h, t, index - 1, val);
        assert(update(index - 1, val, ltail) == cons(h, update(index - 2, val, t)));
        assert(update(index, val, cons(lhead, ltail)) == cons(lhead, update(index - 1, val, ltail)));
      }
      return;
  }
}

  lemma void tail_of_update_0<t>(list<t> lst, t val)
  requires lst != nil;
  ensures tail(lst) == tail(update(0, val, lst));
  {
    switch(lst) {
      case nil: break;
      case cons(h,t): break;
    }
  }

lemma void update_id<T>(int index, list<T> lst)
requires true;
ensures lst == update(index, nth(index, lst), lst);
{
  switch(lst){
    case nil: return;
    case cons(h, t):
      if (index == 0) {
      } else {
        update_id(index - 1, t);
      }
      return;
  }
}

  lemma void update_non_nil<t>(list<t> lst, int n, t val)
  requires lst != nil;
  ensures update(n, val, lst) != nil;
  {
    switch(lst) {
      case nil: break;
      case cons(h,t): break;
    }
  }

  lemma void head_update_0<t>(t val, list<t> lst)
  requires lst != nil;
  ensures head(update(0, val, lst)) == val;
  {
    switch(lst) {
      case nil:
      case cons(h,t):
    }
  }

  lemma void head_update_nonzero<t>(int n, t val, list<t> lst)
  requires 0 < n;
  ensures head(update(n, val, lst)) == head(lst);
  {
    switch(lst) {
      case nil:
      case cons(h,t):
    }
  }

  lemma void update_irrelevant_cell<t>(t vsearch, int n, t vnew, list<t> l)
  requires false == mem(vsearch, l) &*& vsearch != vnew;
  ensures false == mem(vsearch, update(n, vnew, l));
  {
    switch(l) {
      case nil: break;
      case cons(h,t):
        if (n == 0) {
        } else {
          update_irrelevant_cell(vsearch, n-1, vnew, t);
        }
    }
  }

lemma void drop_update_relevant<t>(int k, int i, t val, list<t> l)
requires 0 <= k &*& k <= i &*& i < length(l);
ensures drop(k, update(i, val, l)) == update(i-k, val, drop(k, l));
{
  switch(l) {
    case nil: return;
    case cons(h,t):
      if (k == 0) return;
      drop_update_relevant(k-1, i-1, val, t);
  }
}

lemma void drop_update_unrelevant<t>(int k, int i, t val, list<t> l)
requires 0 <= i &*& i < k;
ensures drop(k, update(i, val, l)) == drop(k, l);
{
  switch(l) {
    case nil: return;
    case cons(h,t):
      if (i == 0) return;
      drop_update_unrelevant(k-1, i-1, val, t);
  }
}

lemma void take_update_relevant<t>(int k, int i, t val, list<t> l)
requires 0 <= i &*& i <= k &*& k < length(l);
ensures take(k, update(i, val, l)) == update(i, val, take(k, l));
{
  switch(l) {
    case nil: return;
    case cons(h,t):
      if (i == 0) return;
      take_update_relevant(k-1, i-1, val, t);
  }
}

lemma void take_update_unrelevant<t>(int k, int i, t val, list<t> l)
requires 0 <= k &*& k <= i;
ensures take(k, update(i, val, l)) == take(k, l);
{
  switch(l) {
    case nil: return;
    case cons(h,t):
      if (k == 0) return;
      take_update_unrelevant(k-1, i-1, val, t);
  }
}

lemma void forall_update<t>(list<t> lst, fixpoint(t,bool) prop, int i, t v)
requires true == forall(lst, prop) &*& true == prop(v);
ensures true == forall(update(i, v, lst), prop);
{
  switch(lst) {
    case nil: return;
    case cons(h,t):
      if (i != 0) forall_update(t, prop, i-1, v);
  }
}

lemma void update_update<t>(list<t> lst, int i, t vi, int j, t vj)
requires i != j;
ensures update(i, vi, update(j, vj, lst)) == update(j, vj, update(i, vi, lst));
{
  switch(lst) {
    case nil: return;
    case cons(h,t):
      if (i == 0) return;
      if (j == 0) return;
      update_update(t, i-1, vi, j-1, vj);
  }
}

  lemma void nth_update_unrelevant<t>(int i, int j, t y, list<t> xs)
  requires i != j;
  ensures nth(i, update(j, y, xs)) == nth(i, xs);
  {
    switch(xs){
      case nil: break;
      case cons(h,t):
        if (j == 0) break;
        if (i == 0) break;
        nth_update_unrelevant(i-1, j-1, y, t);
    }
  }


fixpoint t get_some<t>(option<t> x) {
  switch(x) {
    case none: return default_value<t>();
    case some(v): return v;
  }
}

lemma void some_get_some<t>(option<t> x)
requires x != none;
ensures some(get_some(x)) == x;
{
  switch(x) {
    case none: break;
    case some(v): break;
  }
}

lemma void tail_drop<t>(list<t> lst, int n)
requires 0 <= n &*& n < length(lst);
ensures drop(n+1, lst) == tail(drop(n, lst));
{
  switch(lst) {
    case nil: return;
    case cons(h,t):
      if (n == 0) {
        return;
      } else {
        tail_drop(t, n-1);
      }
  }
}

  lemma void reverse_cons<t>(t head, list<t> tail)
  requires true;
  ensures reverse(cons(head, tail)) == append(reverse(tail), cons(head, nil));
  {
    reverse_append(reverse(tail), cons(head, nil));
  }

  lemma void append_reverse_take_cons<t>(int n, t head, list<t> tail,
                                         list<t> tt)
  requires 0 < n;
  ensures append(reverse(take(n-1, tail)), cons(head, tt)) ==
          append(reverse(take(n,cons(head, tail))), tt);
  {
    reverse_cons(head, take(n-1, tail));
    append_assoc(reverse(take(n-1, tail)), cons(head, nil), tt);
  }

  lemma void append_reverse_tail_cons_head<t>(list<t> l1, list<t> l2)
  requires l1 != nil;
  ensures append(reverse(tail(l1)), cons(head(l1), l2)) ==
          append(reverse(l1), l2);
  {
    reverse_cons(head(l1), tail(l1));
    cons_head_tail(l1);
    append_assoc(reverse(tail(l1)), cons(head(l1), nil), l2);
  }

  lemma void append_append_cons_to_append_cons<t>(list<t> l1, t el, list<t> l2)
  requires true;
  ensures append(append(l1, cons(el, nil)), l2) == append(l1, cons(el, l2));
  {
    switch(l1) {
      case nil: return;
      case cons(h,t):
        append_append_cons_to_append_cons(t, el, l2);
    }
  }


  lemma void forall_nth<t>(list<t> lst, fixpoint(t, bool) p, int i)
  requires 0 <= i &*& i < length(lst) &*& true == forall(lst, p);
  ensures true == p(nth(i, lst));
  {
    switch(lst) {
      case nil: return;
      case cons(h,t):
        if (i == 0){}
        else {
          forall_nth(t, p, i-1);
        }
    }
  }

  lemma void drop_drop<t>(int n, int m, list<t> l)
  requires 0 <= n &*& 0 <= m &*& n + m <= length(l);
  ensures drop(n, drop(m, l)) == drop(n + m, l);
  {
    switch(l) {
      case nil: return;
      case cons(h,t):
        if (n == 0) return;
        if (m == 0) return;
        drop_drop(n, m-1, t);
    }
  }


// Workaround for unmindful Redux solver.
// See https://github.com/verifast/verifast/issues/19
lemma void note(bool b)
requires b;
ensures b;
{}

#endif
