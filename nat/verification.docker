FROM ubuntu:14.04

# We need wget to download the gpg key for the fixed llvm 3.4 repo
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget

# Add a fixed llvm-3.4 repo (the default packages are broken (llvm-config --src-root))
RUN echo "deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.4 main" >> /etc/apt/sources.list && \
    echo "deb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.4 main" >> /etc/apt/sources.list && \
    wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | apt-key add -

# Install the principal body of required packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget build-essential libpcap-dev \
    linux-headers-3.13.0-74-generic libglib2.0-dev \
    tcpdump \
    clang-3.4 llvm-3.4 llvm-3.4-dev llvm-3.4-tools libcap-dev git \
    subversion cmake make libboost-program-options-dev \
    python3 python3-dev python3-pip perl flex bison libncurses-dev \
    zlib1g-dev patch wget unzip binutils && \
    pip3 install -U lit tabulate && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3 50 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    ln -sf /usr/bin/llvm-config-3.4 /usr/bin/llvm-config &&  \
    mv /usr/sbin/tcpdump /usr/bin/tcpdump
# ^^ last line to avoid the apparmor issue for running
# libcrypto.so in --privileged


# Download and extract DPDK
WORKDIR /root
RUN wget http://dpdk.org/browse/dpdk/snapshot/dpdk-2.2.0.tar.gz -O dpdk.tar.gz && \
    tar xf dpdk.tar.gz && \
    mv dpdk-* dpdk && \
    rm dpdk.tar.gz

# Build DPDK
WORKDIR /root/dpdk
RUN sed -ri 's,(PMD_PCAP=).*,\1y,' config/common_linuxapp && \
    make config install -j4 T=x86_64-native-linuxapp-gcc

ENV RTE_SDK=/root/dpdk \
    RTE_TARGET=x86_64-native-linuxapp-gcc

WORKDIR /root

# Download and build STP
RUN git clone https://github.com/stp/minisat.git && \
    git clone https://github.com/stp/stp.git && \
    cd minisat && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_INSTALL_PREFIX=/usr/ ../ && \
    make -j8 install && \
    mkdir /root/stp/build && \
    cd /root/stp/build && \
    cmake -DBUILD_SHARED_LIBS:BOOL=OFF -DENABLE_PYTHON_INTERFACE:BOOL=OFF .. && \
    make -j8 install
# RUN ulimit -s unlimited

# Download and build uCLibc
RUN git clone https://github.com/klee/klee-uclibc.git && \
    cd klee-uclibc && \
    ./configure --make-llvm-lib && \
    make -j8

# Download and build Klee
RUN git clone https://github.com/necto/klee && \
    cd klee && \
    ./configure --with-stp=/root/stp/build --with-uclibc=/root/klee-uclibc --enable-posix-runtime && \
    make -j8

ENV PATH=/root/klee/Release+Asserts/bin:$PATH \
    KLEE_INCLUDE=/root/klee/include

RUN mkdir /root/nat
COPY *.h *.c Makefile /root/nat/
COPY containers/ /root/nat/containers/
WORKDIR /root/nat
#RUN make verify

