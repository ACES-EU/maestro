### Use this to build an executable DSOS image

SHELL := /bin/bash -O extglob -c

LLD ?=ld.lld-6.0
CLANG ?=clang
NASM ?=nasm
QEMU ?=../../qemu/i386-softmmu/qemu-system-i386

export RTE_TARGET := i686-native-linuxapp-gcc

arch ?= i386
target ?= $(arch)-dsos
kernel := kernel-$(arch).bin
iso := dsos-$(arch).iso

NF_DIR := .
CONTAINERS_DIR := lib/containers
STUBS_DIR := lib/stubs
KERNEL_DIR := lib/kernel
NAT_DIR := vignat

linker_script := linker.ld
grub_cfg := grub.cfg

# NAT
nat_source_files := $(NAT_DIR)/nat_main.c \
	$(NAT_DIR)/nat_config.c \
	$(NAT_DIR)/nat_flow.c \
	$(NAT_DIR)/nat_flowmanager.c

# NF
nf_includes := -I $(NF_DIR)
nf_includes += -I src
nf_includes += -I $(RTE_SDK)/lib/librte_cmdline

nf_defs := -D_GNU_SOURCE

# For NAT debug output
# nf_defs += -DENABLE_LOG

nf_source_files := $(NF_DIR)/nf_main.c \
	$(NF_DIR)/lib/nf_util.c \
	$(NF_DIR)/lib/nf_time.c

nf_source_files += $(wildcard $(RTE_SDK)/lib/librte_cmdline/*.c)
nf_source_files += $(CONTAINERS_DIR)/map.c \
	$(CONTAINERS_DIR)/map-impl.c \
	$(CONTAINERS_DIR)/double-map.c \
	$(CONTAINERS_DIR)/double-chain.c \
	$(CONTAINERS_DIR)/double-chain-impl.c \
	$(CONTAINERS_DIR)/vector.c \
	$(NF_DIR)/lib/expirator.c

# DPDK
dpdk_includes := -I $(RTE_SDK)/include/dpdk \
	-I $(RTE_SDK)/lib/librte_eal/common \
	-I $(RTE_SDK)/drivers/bus/vdev \
	-I $(RTE_SDK)/drivers/bus/pci \
	-I $(RTE_SDK)/drivers/net/ixgbe \
	-I $(RTE_SDK)/lib/librte_kni

dpdk_includes += --include=$(STUBS_DIR)/builtin_stub.h --include=rte_config.h

dpdk_defs := -DRTE_COMPILE_TIME_CPUFLAGS=RTE_CPUFLAG_SSE -D__linux__

dpdk_source_files += $(wildcard $(RTE_SDK)/lib/librte_eal/common/*.c)
dpdk_source_files += $(RTE_SDK)/lib/librte_eal/common/arch/x86/rte_cycles.c
dpdk_source_files += $(RTE_SDK)/lib/librte_eal/common/arch/x86/rte_cpuflags.c
dpdk_source_files += $(wildcard $(RTE_SDK)/lib/librte_eal/linuxapp/eal/*.c)
dpdk_source_files += $(wildcard $(RTE_SDK)/lib/librte_ether/*.c)
dpdk_source_files += $(wildcard $(RTE_SDK)/lib/librte_mempool/*.c)
dpdk_source_files += $(wildcard $(RTE_SDK)/lib/librte_mbuf/*.c)
dpdk_source_files += $(wildcard $(RTE_SDK)/lib/librte_pci/*.c)
dpdk_source_files += $(wildcard $(RTE_SDK)/drivers/bus/vdev/*.c)
dpdk_source_files += $(wildcard $(RTE_SDK)/drivers/bus/pci/*.c)
dpdk_source_files += $(wildcard $(RTE_SDK)/drivers/bus/pci/linux/*.c)
dpdk_source_files += $(RTE_SDK)/drivers/net/virtio/virtio_ethdev.c
dpdk_source_files += $(RTE_SDK)/drivers/net/virtio/virtio_pci.c
dpdk_source_files += $(RTE_SDK)/drivers/net/virtio/virtio_rxtx_simple_sse.c
dpdk_source_files += $(RTE_SDK)/drivers/net/virtio/virtio_rxtx_simple.c
dpdk_source_files += $(RTE_SDK)/drivers/net/virtio/virtio_rxtx.c
dpdk_source_files += $(RTE_SDK)/drivers/net/virtio/virtqueue.c

# Stubs
stubs_source_files := $(wildcard $(STUBS_DIR)/*.c)
stubs_source_files += $(wildcard $(STUBS_DIR)/externals/*.c)
stubs_source_files := $(filter-out $(STUBS_DIR)/hardware_stub.c, $(stubs_source_files))
stubs_source_files := $(filter-out $(STUBS_DIR)/driver_stub.c, $(stubs_source_files))
stubs_source_files := $(filter-out $(STUBS_DIR)/dpdk_low_level_stub.c, $(stubs_source_files))

kernel_source_files := $(wildcard $(KERNEL_DIR)/*.c)

kernel_includes := -I $(KERNEL_DIR)

# other_misc_includes := -I include --include include/misc_defs.h
other_misc_includes := -I lib/stubs -I lib --include $(NF_DIR)/lib/misc_defs.h

all_c_source_files = $(nat_source_files) $(nf_source_files) \
	$(dpdk_source_files) $(stubs_source_files) $(kernel_source_files)
all_c_object_files := $(patsubst %.c, %.o, $(all_c_source_files))

assembly_source_files := $(KERNEL_DIR)/asm/boot.asm  $(KERNEL_DIR)/asm/multiboot_header.asm
assembly_object_files := $(patsubst %.asm, %.o, $(assembly_source_files))

CFLAGS := --target=i686-pc-none-elf -march=i686 -mssse3 -msse2 -msse4.1 -c \
	-ffreestanding -g -Wno-macro-redefined

OBJ_LIST := $(assembly_object_files) $(all_c_object_files)

NAT_MAC1 := 52:54:00:12:35:60
NAT_MAC2 := 52:54:00:12:34:60

QEMUFLAGS := -enable-kvm -cdrom $(iso)

QEMU_RUNFLAGS := $(QEMUFLAGS) -nic user,model=virtio-net-pci \
	-nic user,model=virtio-net-pci
QEMU_DEMOFLAGS := $(QEMUFLAGS) \
	-nic tap,model=virtio-net-pci,mac=$(NAT_MAC1),ifname=$(NAT_NIC1),script=no,downscript=no \
	-nic tap,model=virtio-net-pci,mac=$(NAT_MAC2),ifname=$(NAT_NIC2),script=no,downscript=no

.PHONY: all clean run iso kernel

all: $(kernel)

clean:
	@rm -f $(OBJ_LIST)

# Launch QEMU
run: $(iso)
	@$(QEMU) $(QEMU_RUNFLAGS) -curses

# Launch QEMU for NAT demo
demo: $(iso)
	$(QEMU) $(QEMU_DEMOFLAGS)

# Launch QEMU and attach debugger
debug: $(iso)
	@$(QEMU) -s -S $(QEMU_RUNFLAGS) -nographic > /dev/null 2>&1 &
	@gdb $(kernel) -ex "target remote localhost:1234" \
		-ex "hb main" \
		-ex "layout src" -ex "c" -ex "d 1" \
		-ex "b exit" \
		-ex "b abort" \
		-ex "b __assert_fail"

	@kill `pidof qemu-system-i386`

iso: $(iso)

# Make bootable iso image
$(iso): $(kernel) $(grub_cfg)
	@mkdir -p build/isofiles/boot/grub
	@cp $(kernel) build/isofiles/boot/kernel.bin
	@cp $(grub_cfg) build/isofiles/boot/grub
	@grub-mkrescue -o $(iso) build/isofiles 2> /dev/null
	@rm -r build/isofiles

# Link final executable
$(kernel): $(OBJ_LIST) libc.a
	@$(LLD) -m elf_i386 -T $(linker_script) -error-limit=0 -o $(kernel) \
		 $(OBJ_LIST) libc.a \
		-L/usr/lib/clang/6.0.0/lib/linux -lclang_rt.builtins-i386

# Assembly files
%.o: %.asm
	@$(NASM) -felf32 $< -o $@

# C files
%.o: %.c
	@$(CLANG) $(nf_defs) $(dpdk_defs) \
		$(nf_includes) $(dpdk_includes) $(other_misc_includes) $(kernel_includes) \
		$(CFLAGS) $< -o $@
