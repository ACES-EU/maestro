#ifndef _PERMUTATIONS_GH_INCLUDED_
#define _PERMUTATIONS_GH_INCLUDED_

#include <nat.gh>
#include "listutils.gh"

fixpoint bool is_sub_permutation(list<int> xs, int max_val) {
    return forall(xs, (lt)(max_val)) && true == forall(xs, (ge)(0)) && no_dups(xs);
}

fixpoint bool is_sub_permutation2(int max_val, list<int> xs) {
    return is_sub_permutation(xs, max_val);
}

lemma_auto(is_sub_permutation2(max_val, nil)) void sub_permutation2_nil(int max_val)
    requires    true;
    ensures     true == is_sub_permutation2(max_val, nil);
{}

lemma void sub_permutation2_forall_nil(list< list<int> > xs, int max_val)
    requires    true == forall(xs, (eq)(nil));
    ensures     true == forall(xs, (is_sub_permutation2)(max_val));
{
    switch(xs) {
        case nil:
        case cons(x0, xs0): sub_permutation2_forall_nil(xs0, max_val);
    }
}

fixpoint bool is_permutation(list<int> xs) {
    return forall(xs, (lt)(length(xs))) && true == forall(xs, (ge)(0)) && no_dups(xs);
}

fixpoint bool permutation_contains_all(list<int> xs, nat x) {
    switch(x) {
        case zero: return mem(int_of_nat(zero), xs);
        case succ(x_pred): return mem(int_of_nat(x), xs) && permutation_contains_all(xs, x_pred);
    }
}

lemma void permutation_def_to_contains_all(list<int> xs)
    requires    true == is_permutation(xs);
    ensures     true == permutation_contains_all(xs, nat_of_int(length(xs)));
{
    assume (true == permutation_contains_all(xs, nat_of_int(length(xs))));
}

lemma void permutation_contains_all_to_some(list<int> xs, int check_for)
    requires
        true == permutation_contains_all(xs, nat_of_int(length(xs))) &*&
        0 <= check_for &*& check_for < length(xs);
    ensures
        true == mem(check_for, xs);
{
    assume (true == mem(check_for, xs));
}

fixpoint int list_to_length<t>(list<t> xs) {
    return length(xs);
}


fixpoint bool integer_copies(list<int> xs, nat val, int nb_copies) {
    switch(val) {
        case zero: return count(xs, (eq)(int_of_nat(val))) == nb_copies;
        case succ(val_pred): return count(xs, (eq)(int_of_nat(val))) == nb_copies && integer_copies(xs, val_pred, nb_copies);
    }
}

lemma void permutation_to_count(list<int> xs)
    requires    true == is_permutation(xs) &*& 0 < length(xs);
    ensures     true == integer_copies(xs, nat_of_int(length(xs) - 1), 1);
{
    assume (true == integer_copies(xs, nat_of_int(length(xs) - 1), 1));
}


lemma void permutation_list_to_count(list<int> xs, nat nb_split, int n)
    requires    true == forall(list_split_every_n(xs, nb_split, n), is_permutation);
    ensures     true == integer_copies(xs, nat_of_int(length(xs) - 1), int_of_nat(nb_split));
{
    assume (true == integer_copies(xs, nat_of_int(length(xs) - 1), int_of_nat(nb_split)));
}


#endif //_PERMUTATIONS_GH_INCLUDED_
