FROM ubuntu:14.04

# We need wget to download the gpg key for the fixed llvm 3.4 repo
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget

# Add a fixed llvm-3.4 repo (the default packages are broken (llvm-config --src-root))
RUN echo "deb http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.4 main" >> /etc/apt/sources.list && \
    echo "deb-src http://llvm.org/apt/trusty/ llvm-toolchain-trusty-3.4 main" >> /etc/apt/sources.list && \
    wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | apt-key add -

# Install the principal body of required packages
# Note the linux-headers-x.xx.x-xx-generic package. It may differ in your case.
# the version number seem to change randomly from time to time. It is required
# for DPDK build.
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget build-essential libpcap-dev \
    linux-headers-3.13.0-74-generic libglib2.0-dev \
    linux-headers-3.13.0-35-generic \
    tcpdump \
    parallel \
    software-properties-common \
    clang-3.4 llvm-3.4 llvm-3.4-dev llvm-3.4-tools libcap-dev git \
    subversion cmake make libboost-program-options-dev \
    python3 python3-dev python3-pip perl flex bison libncurses-dev \
    zlib1g-dev patch wget unzip binutils && \
    pip3 install -U lit tabulate && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3 50 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    ln -sf /usr/bin/llvm-config-3.4 /usr/bin/llvm-config &&  \
    mv /usr/sbin/tcpdump /usr/bin/tcpdump
# ^^ last line to avoid the apparmor issue for running
# libcrypto.so in --privileged

# Set-up OPAM for ocaml corebuild util and the Core library
RUN add-apt-repository ppa:avsm/ppa && apt-get update && apt-get install -y m4 ocaml opam && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# And install those libraries
RUN opam init -a -y && \
    eval `opam config env` && \
    opam install ocamlfind core.112.35.00 sexplib.112.35.00 menhir -y

# Create the main directory where all the work will take place
RUN mkdir /work

# Download and extract DPDK
WORKDIR /work
RUN wget http://dpdk.org/browse/dpdk/snapshot/dpdk-2.2.0.tar.gz -O dpdk.tar.gz && \
    tar xf dpdk.tar.gz && \
    mv dpdk-* dpdk && \
    rm dpdk.tar.gz

# Build DPDK
WORKDIR /work/dpdk
RUN sed -ri 's,(PMD_PCAP=).*,\1y,' config/common_linuxapp && \
    make config install -j4 T=x86_64-native-linuxapp-gcc

ENV RTE_SDK=/work/dpdk \
    RTE_TARGET=x86_64-native-linuxapp-gcc

WORKDIR /work

# Download and build STP
RUN git clone --depth 1 https://github.com/stp/minisat.git && \
    git clone --depth 1 https://github.com/stp/stp.git && \
    cd minisat && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_INSTALL_PREFIX=/usr/ ../ && \
    make -j8 install && \
    mkdir /work/stp/build && \
    cd /work/stp/build && \
    cmake -DBUILD_SHARED_LIBS:BOOL=OFF -DENABLE_PYTHON_INTERFACE:BOOL=OFF .. && \
    make -j8 install
# RUN ulimit -s unlimited

# Download and build uCLibc
RUN git clone --depth 1 https://github.com/klee/klee-uclibc.git && \
    cd klee-uclibc && \
    ./configure --make-llvm-lib && \
    make -j8

# Download and build Klee
RUN git clone --depth 1 https://github.com/necto/klee && \
    cd klee && \
    ./configure --with-stp=/work/stp/build --with-uclibc=/work/klee-uclibc --enable-posix-runtime && \
    make -j8

# Download and build VeriFast
RUN git clone --depth 1 https://github.com/necto/verifast -b export_path_conditions && \
    cd verifast/src && \
    make -j8 verifast

ENV PATH=/work/verifast/bin:/work/klee/Release+Asserts/bin:$PATH \
    KLEE_INCLUDE=/work/klee/include

COPY nat /work/nat
COPY validator /work/validator
WORKDIR /work
#RUN cd nat && make verify
#RUN cd validator && ./test_all.sh ../nat/klee-last aaa

